package mytesting;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;


public class CollectionListAndIterator {
    public static void main(String[] args) {
        /*Повторим как пишутся массивы int [] array = new int [3];
         * Создали массив array на 3 элемента
         * Но что делать если нам нужно добавить в масив 4ый элемент,
         * что делать если мы не знаем размер за ране, для этого нам помогут
         * интерфейсы для работы с коллекциями, набор данных интерфейсов
         * называется Collection Framework, Расмотрим одну из колекций
         * которая входит в состаыв данного фреймворка и эта колекция
         * называется List. List это грубо говоря динамический массив
         * который может менять свой размер в зависимости от того как
         * мы добавляем или удаляем элементы, то есть при добавление
         * нового элимента размер массива увеличивается  при удалении
         * уменьшается. То есть коллекция позволяет нам решить
         * проблему статического размера масива, то есть мы можем
         * не знать за ранее размер и изминять его динамически в зависемости
         * от того сколько элементов нам туда нужно поместить
         * Пример: */

        // Напишем название колекции List в треугольных скобках
        // указываем джейнерик Integer либо любой другой нужный нам
        // класс, то есть это класс обьектов которые будут храниться
        // в нашей колекции в нашем случае это будут обьекты Integer,
        // то есть это будут целочисленые значения, далее назовем как нибудь
        // наш List например "list", далее напишем одну из реализаций
        // листа то есть это будет ArrayList<>()
        // Листов существуют несколько типов мы рассмотри самую популярную
        // реализацию данного листа, это ArrayList

        List<Integer> list = new ArrayList<>();
        // если мы хотим добавить элемент в список мы используем метод
        // .add
        list.add(5);
        list.add(10);
        // таким образом в нашем листе теперь два элемента и размер его тоже два
        // когда мы добавим новый элемент размер увеличится и станет три
        // и так далее т.е. при добавлении нового элемента, рвазмер списка
        // динамически увеличивается
        list.add(9);
        System.out.println();

        // Еще один метод это метод .get использовать его можно для
        // того что бы получить значение элемента в списке
        System.out.println(list.get(1));// элементы в листе формируются так же
        // как и в массиве начина с нуля
        // в данном случае мы выведем второй
        // элемент с индексом один
        // Так же мы можем записать
         int a = list.get(2); // наша переменная "а" примит значение третьего элемента
        // в списке
        System.out.println();

        // След метод это метод .set - позволяет изменить установить значение
        // какой либо переменной элементу в списке, то есть мы можем присвоить
        // новое значение элементу

        list.set(2, 100);// то есть 3му элементу мы присвоим значение 100
        System.out.println(list.get(2));// выводим 3ий элемент с индексом 2
        System.out.println();

        //Следующий метод .remove - c помощью этого метода мы можем
        //удалить элемент из списка
        System.out.println(list.get(1));//выводим элемент 1
        list.remove(1);// удаляем элемент 1
        System.out.println(list.get(1));// проверим удалился ли элемент 1
        System.out.println();           //При удалении элементов список сдвигается


        //Следующий метод позволяет узнать размер нашего списка
        // .size
        System.out.println(list.size());
        list.add(9);
        System.out.println(list.size());
        System.out.println();

        // Для очистки списка можно использовать метод .clear
        //list.clear();// очистим список
        System.out.println(list.size());// проверим размер после очистки списка
        System.out.println();

        // Создадим еще один лист list2
        List<Integer> list2 = new ArrayList<>();
        list2.add(45);
        list2.add(56);
        // c помощью метода .addAll мы можем из одного листа добавить элементы
        // в другой лист, таким образом мы создали новый лист и назвали его
        // list2 добавили в него два элемента и с помощью метода .addAll
        // мы передали их в лист list
        System.out.println(list.size());//Проверим размер до добавления
        list.addAll(list2);//Добавим элементы из list2 в list
        System.out.println(list.size());//Проверим размер после добавления
        System.out.println();

        // Следующий метод называется .removeAll позволяет из одного списка
        // удалить элименты другого списка

        list.removeAll(list2);//из листа list удалили элименты листа list2
        System.out.println(list.size());//проверяем размер после удаления
        System.out.println();

        //След метод .isEmpty - позволяет узнать пустой ли нашь лист или нет

        System.out.println(list.isEmpty());//так как лист не пустой получем рез false
       // list.clear();// очистим лист
        System.out.println(list.isEmpty()); //так как лист пуст получим рез true
        System.out.println();

        //След элимет .contains позволит нам узнать есть ли в списке
        //какой то обьект, напириме мы хотим узнать если в нашем списке
        //число 100
        System.out.println(list.contains(100));// Этот метод возвращает
        //значения true или false, в данном случае мы получим true так как
        //число 100 есть в листе
        System.out.println(list.contains(987));// получим false так как такого числа нет
        System.out.println();

        //След метод .containsAll - позволяет узнать существуют ли
        //элементы второго списка в первом списке.
        //Пример: Добавим все элементы второго списка в первы
        list.addAll(list2);
        System.out.println();
        System.out.println(list.containsAll(list2));//проверим содержит ли первый список
        //элементы второго списка, и плочум результат true так как элементы содержатся
        list.removeAll(list2);//удалим все элементы второго списка в первы
        System.out.println(list.containsAll(list2));//проверим содержит ли первый список
        //элементы второго списка, и плочум результат false так как элементы не содержатся
        System.out.println();

        /* Итератор это итерфейс который позволяет работать
         * с элиментами списка или какой то колекци */
        //Создадим новый лист list3 и добавим в него три элемента
        List<Integer> list3 = new ArrayList<>();
        list3.add(5);
        list3.add(6);
        list3.add(2);
        //Напишем Iterator скажем что он будет принимать целочисленые значения
        //назовем его iterator и вызовем метотод который называется .iterator,
        //вызовим его у нажего листа. То есть наш список вернет iterator которым
        //мы будем пользоваться для того что бы указывать на какие то элименты

        Iterator<Integer> iterator = list3.iterator();
        //метод .next указывает на следующий элемент в списке,
        //в начале наш iterator находится перед первым элементом
        //списка, то есть когда мы вызываем метод .next то мы указываем на первый
        //элемент списка
        System.out.println(iterator.next());//Выведим первый элемент
        System.out.println(iterator.next());//Выведем второй элемент
        //След метод .hasNext данный метод позволяет узнать существуют ли следующий элемент
        //в списке, то есть если наш список хранит пять элементов и мы находимся в третьем
        //то нашь метод вернет true так как следующий элемент еще есть,если мы будем
        //находиться на последнем элементе и вызовим хэтот метод тогда получим значение
        //false так как это последний элемент
        System.out.println();
        System.out.println(iterator.hasNext());//получим значение true
        System.out.println();
        //И так как мы можем использовать наш Iterator и данные методы
        //к примеру мы хотим вывести все значения списка на экран
        //для этого мы создадим iterator1 и напишем цикл, в цикле мы напишем
        //следуещее, пока .hesNext будет возвращать true, то есть мы будем
        //перебирать все элементы в списке и когда мы окажемся на последнем
        //мы выполним какие то операции и наш цикл закончится так как след
        //элемента не будет, и внутри цикла мы воводим на экран iterator.next
        //то есть переходим на следующий элемент и выводим его на экран
        Iterator<Integer> iterator1 = list3.iterator();
        while (iterator1.hasNext()){
            System.out.println(iterator1.next());
        }





    }
}
