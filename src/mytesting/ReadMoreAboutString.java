package mytesting;

public class ReadMoreAboutString {

    public static void main(String[] args) {

        /*Тип String является не приметивным типом данных
          как int, double, это целый класс,
          При работе со строками мы имеем дело с обьектами
          Одно из отличий при работе с обьектами от работы
          с приметивными типами данных это их сравнение
          то есть если мы хотим сравнить строку с какой то
          другой строкой то в данном случае мы уже не можем
          использовать сравнение такого рода "=="
          по тому как при сравнении таким образом обьектов, сравниваются
          ссылки на эти обьекты, а в нашем случае когда мы хотим сравнить
          значение строк, мы должны использовать ментод который
          называется ".equals"*/

        String s = "Hello World!";

        System.out.println(s.equals("Hello World!"));// Метод .equals возвращает значения
        // типа boolean или true или false
        System.out.println(s.equals("Hello!"));
        System.out.println();

        String s2 = "Hello";
        System.out.println(s.equals(s2));// Результат будет false так как
        // строки s и s2 разные
        System.out.println();

        /* Так же для сравнения строк можно использовать метод .equalsIgnoreCase
         Обе переменные с одинаковым значение но записаны в разных регистрах
         и если в таком случае мы будем использовать метод .equals то результат
         будет false, но если использовать метод .equalsIgnoreCase то сравнение
         будет производиться без учета регистра*/

        s = "text";
        s2 = "TEXT";

        System.out.println(s.equals(s2)); //Результат false
        System.out.println(s.equalsIgnoreCase(s2)); // Результат true
        System.out.println();

        /* Также существуют такие методы как .toLowerCase() позволяющий преобразовать
           строку в маленький регистр и метод .toUpperCase() позволяющий преобразовать
           текст в большой регистр*/
        s = "TeXt";
        System.out.println(s);//Получаем наш оригинальный текст присвоеный переменной "s"
        System.out.println(s.toLowerCase());//Получаем текст с маленьким регистром
        System.out.println(s.toUpperCase());//Получаем текс с большим регистром
        System.out.println();

        /*Следующий метод это метод .charAt() позволяющий нам по индексу найти
           символ который находится в строке */
        System.out.println(s.charAt(1));//Так мы получаем символ "е" в строках как
        //и в масивах у каждой буквы есть свой индекс и индексация начинается с нуля
        //Так же существует обратная операция это метод .indexOf() с помощью него мы можем
        //найти какой индекс у какой то части строки
        System.out.println(s.indexOf("Xt"));//Получем результат 2
        System.out.println();

        /* Следующий метод это метод .contains() возвращает boolean true или false и проверяет содержит ли
         * строчка в себе какую то другую строку*/

        s = "Hello, World!";
        System.out.println(s.contains("Hello"));//Получим true
        System.out.println(s.contains("text"));//Получим false
        System.out.println();
        /* Для того что бы проверить длину строки используем метод .length()*/
        System.out.println(s.length());
        System.out.println();

        /* Для того что бы проверить на какие символы начинается или заканчивается
        строка заявленая в переменной.
        Метод .startsWith() - сравнивает начло строки
        Метод .endsWith() - сравнивает конец строки*/
        System.out.println(s.startsWith("He"));// Получим результат true
        System.out.println(s.startsWith("!"));// Получим результат false
        System.out.println(s.endsWith("He"));//Получим результат false
        System.out.println(s.endsWith("!"));//Получим результат true
        System.out.println();

        /* Следующий метод позволит нам разбить строку используя кокой либо разделитель
        например "," Метод называетсЯ .split*/
        s = "hello,world";
        System.out.println();
        String[] array = s.split(",");//Создаём массив элементов String
        //назовем массив array и скажем что он равен
        //методу  .split в методе указываем разделитель
        //"," Теперь мы получим массив из двух элементов
        System.out.println(array[0] + "!" + array[1] + "!");//При выводе получим hello!world!
        System.out.println(array[0]);
        System.out.println(array[1]);//Таким оюразом мы выводи наши строки по отдельности
        System.out.println();

        /* При помощи слудующего метода мы сможем фоматировать строку
         * Метод называется String.format */
        String art = "My name is %s! I'm %d years old"; //В данном случае мы создали шаблон
        //но не указывали точное значение имени
        //и сколько лет. Поэтому мы оставили
        //некоторое место куда наши значения
        //вставятся в будующем %s - имя строка
        //а на место %d - возраст целое число
        int age = 30;
        String name = "Ivan";
        System.out.println(String.format(art, name, age));//И так с помощью нашего метода
        //мы в нашь шаблон вставили имя и возвраст
        System.out.println(String.format(art, "Roman", 25));//Так в будующем можно форматировать
        //строку много раз
        System.out.println();

        /* Следующий метод не класса String а класа integer но преднозначен для работы
         * с классом String служит для того что бы мы могли преобразовать переменную типа
         * String  в переменную int называется этот детод Integer.parseInt()*/
        String age2 = "25";
        int a = Integer.parseInt(age2);// Вот таким способом мы преобразовали переменную
        // String age2 в переменную int a
        //И теперь мы можем с ней работать дальше как с переменной типа int
        System.out.println(a + 25);
        System.out.println();

        /* Следующий метод называется .substring() и позволяет выделить какую то подстроку
         * из какой либо строки, то есть если мы например хотим получить от какой то
         * строки ее часть то при использовании этогно метода, мы можем ее получить
         * Пример: */
        s = "Hello, world!";
        System.out.println(s.substring(1, 5));//В таком случае мы выделяем строку
        // с 1го по 5ый индекс
        System.out.println(s.substring(7));// Так же можно указать один индекс
        //и тогда наша строка обрежится с
        // указаного индекса и до конца строки
        System.out.println();
        /*Так же можно совмещать методы, например мы можем использовать метод .length*/
        System.out.println(s.substring(7, s.length() - 2));
        /*Получим результат "worl" методлм .substring мы вырезаем строку с 7го индекса
          и до конца строки и говорим что последние два индекса тоже откинуть.*/
        System.out.println();

        /* Следующий метод для выполнения канкатинации строк (это обьединения строк, их слияние)*/

        String s1 = "Hello";
        s2 = "world";
        String s3 = "!";
        String res;

        res = s1 + s2 + s3;
        System.out.println(res);//Таким образом мы соединили три строки
        // Но есть еще один способ с помощью метода .concat
        res = s1.concat(s2).concat(s3);
        System.out.println(res);//Данный способ лучшу сказывается на производительности
        //При больших масштабах данный способ может улучшить скорость программы
    }
}