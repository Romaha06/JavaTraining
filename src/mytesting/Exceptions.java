package mytesting;

public class Exceptions {

    public static void main(String[] args) {
        /* Исключения - это ошибки которые могу возникать во время рботы программы
         * и Java предусматривает механизмы для того что бы обрабатывать какие либо
         * исключения. Для этого существует несколько ключевых слов которые мы можем
         * использовать для того что бы обработать наши исключения.
         * Пример:
         * Напишем метод который будет делить два числа и будет выводить на
         * экран результат деления. Но как нам известно делить на 0 нельзя
         * и поэтому при попытке мы получим ошибку(Исключение). При этом мы може это
         * исключение кое каким образом обработать. Для этого мы можем воспользоваться
         * конструкцией try catch для того что бы поймать исключение
         * В блок try мы помещаем код который хотим выполнить, в котором по
         * нашему мнению может выскачить какая то ошибка(Исключение).
         * В блоке catch мы указываем исключение которое мы хотим отловить
         * и в фигурных скобках пишем некоторые действия которые мы
         * будем выполнять если мы поймаем данную ошибку
         * В конце мы можем по желанию указать блок finally который будет выполняться
         * не зависимо от того будет ли ошибка или нет!*/

        //пример с try catch
        devide(2, 2);
        devide(10, 5);
        devide(2, 0);

        //пример с throw\
        try {
            dev(10, 2);
        }catch (ArithmeticException e){
            e.printStackTrace();
        }


    }

    public static void devide(int a, int b) {
        try {
            System.out.println("Result is: " + a / b);//Выполняется при корректном делении
        } catch (ArithmeticException e) {
            System.out.println("Problem");//Выполняется при ошибке
        } finally {
            System.out.println("Finish");//выболняется в любом случае
        }
    }

    /*Рассмотрим еще одно ключевое слов для исключений!
     * Throw - так же с помощью него можно выводить сообщения об ошибке
     * Например рассмотрим еще один вариант с делением на 0, с помощью
     * оператора if говорим что если b равно 0 то выводим сообщение об ошибке,
     * а если нет то выводим результат деления
     * Так же если нашь метод выбрасывает какое то исключение и мы его
     * не обрабатываем, тогда мы должны указать в описании методо
     * throws и то исключение которое он может выбрасить, в нашем случае
     * это ArithmeticException и далее мы при выполнении нашей программы
     * обработаем наш метод в конструкции try catch
     * Соответственно мы попробуем выполнить метод dev и если мы отловим
     * ArithmeticException который выбрасит наш метод dev то мы выполним какой то
     * код который указан в блоке catch, в нашем случае мы выведем StackTrace
     * нашего исключения*/

    public static void dev(int a, int b) throws ArithmeticException{
        if (b == 0) {
            throw new ArithmeticException("Cannot dev by zero!");
        } else {
            System.out.println("Result is: " + a / b);
        }
    }
}




